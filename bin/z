#!/usr/bin/env ruby

require "djinni"
require "fileutils"
require "hilighter"
require "optparse"
require "zoom"

class ZoomExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

def parse(args)
    options = Hash.new
    options["action"] = "exec"
    options["cache_file"] = nil
    options["debug"] = false
    options["passthru"] = ""
    options["tool"] = nil
    options["translate_flags"] = Hash.new
    options["use"] = nil
    options["verbose"] = false

    info = [
        "Do you like to search through code using ag, ack, grep, pt,",
        "or rg? Good! This tool is for you! Zoom adds some",
        "convenience to grep-like search tools by allowing you to",
        "quickly open your search results in your editor of choice.",
        "When looking at large code-bases, it can be a pain to have",
        "to scroll to find the filename of each result. Zoom prints",
        "a tag number in front of each result that grep outputs.",
        "Then you can quickly open that tag number with Zoom to jump",
        "straight to the source. Zoom is even persistent across all",
        "your sessions! You can search in one terminal and jump to a",
        "tag in another terminal from any directory!"
    ].join(" ")

    passthru = Array.new

    parser = OptionParser.new do |opts|
        opts.summary_width = 25

        opts.banner = [
            "Usage: #{File.basename($0)} [OPTIONS] --",
            "[passthru options] [regex] [path1]...[pathN]"
        ].join(" ")

        opts.on("", "DESCRIPTION")

        info.scan(/\S.{0,66}\S(?=\s|$)|\S+/).each do |line|
            opts.on("    #{line}")
        end

        opts.on("", "OPTIONS")

        opts.on(
            "-A",
            "--after-context=NUM",
            "Show NUM lines after each match"
        ) do |num|
            passthru.push("-A #{num}")
        end

        opts.on(
            "-a",
            "--all",
            "Search all files (including binaries and VCS",
            "ignored files)"
        ) do
            options["translate_flags"]["all"] = ""
        end

        opts.on(
            "-B",
            "--before-context=NUM",
            "Show NUM lines before each match"
        ) do |num|
            passthru.push("-B #{num}")
        end

        opts.on("-c", "--cache", "Show previous results") do
            options["action"] = "cache"
        end

        opts.on(
            "-o",
            "--cache-file=FILE",
            "Use alternate cache"
        ) do |file|
            options["cache_file"] = file
        end

        opts.on(
            "-C",
            "--context=NUM",
            "Show NUM lines before and after each match"
        ) do |num|
            passthru.push("-C #{num}")
        end

        opts.on(
            "-d",
            "--debug",
            "Show command that would be run (but don't run)"
        ) do
            options["debug"] = true
        end

        opts.on("-f", "--follow", "Follow symlinks") do
            options["translate_flags"]["follow"] = ""
        end

        opts.on("--find", "Use built-in find profile") do
            options["use"] = "find"
        end

        opts.on(
            "--force-tool=TOOL",
            "Use the specified tool (with applicable",
            "profiles)"
        ) do |tool|
            options["tool"] = tool
        end

        opts.on(
            "-g",
            "--go=NUM",
            "Open editor to search result NUM"
        ) do |go|
            options["action"] = "go"
            options["use"] = go
        end

        opts.on("-h", "--help", "Display this help message") do
            puts(opts)
            exit ZoomExit::GOOD
        end

        opts.on(
            "-i",
            "--ignore=GLOB",
            "Ignore files/directories matching GLOB"
        ) do |regex|
            options["translate_flags"]["ignore"] ||= Array.new
            options["translate_flags"]["ignore"].push(regex)
        end

        opts.on("-l", "--list", "List profiles") do
            options["action"] = "list_profiles"
        end

        opts.on(
            "--regex-file=FILE",
            "Read regexes from lines of file (treated as",
            "OR)"
        ) do |file|
            regexes = File.open(file).read.split(/[\n\r]+/)
            options["regex"] = "(#{regexes.join(")|(")})"
        end

        opts.on("-r", "--repeat", "Repeat last Zoom command") do
            options["action"] = "repeat"
        end

        opts.on("-u", "--use=NAME", "Run specified profile") do |name|
            options["use"] = name
        end

        opts.on("-w", "--word-regexp", "Only match whole words") do
            options["translate_flags"]["word-regexp"] = ""
        end

        opts.on("--which", "Display current profile") do
            options["action"] = "which"
        end

        opts.on("", "CONFIGURE_OPTIONS")

        opts.on(
            "--configure",
            "Open prompt to edit profiles"
        ) do
            options["action"] = "configure"
        end

        opts.on("--rc", "Create default config file") do
            options["action"] = "rc"
        end

        opts.on(
            "--secprofs",
            "Create some security related profiles"
        ) do
            options["action"] = "secprofs"
        end

        opts.on("", "MISC_OPTIONS")

        opts.on(
            "--list-profile-names",
            "List profile names for completion functions"
        ) do
            options["action"] = "list_profile_names"
        end

        opts.on(
            "--list-tags",
            "List tags for completion functions"
        ) do
            options["action"] = "list_tags"
        end

        opts.on("--nocolor", "Disable colorized output") do
            Hilighter.disable
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("-V", "--version", "Show version") do
            __FILE__.match(/ruby-zoom-(\d+\.\d+\.\d+)/) do |m|
                puts("zoom version #{m[1]}")
            end
            exit ZoomExit::GOOD
        end

        opts.on(
            "",
            "EXAMPLES",
            "    Execute default profile:",
            "    $ z REGEX",
            "",
            "    Execute specified profile:",
            "    $ z -u grep REGEX",
            "",
            "    Pass additional flags to grep profile:",
            "    $ z -u grep -- --line-regexp REGEX",
            "",
            "    Ignore .class files and test related files",
            "    $ z -i \"*.class\" -i \"*test*\" REGEX",
            "",
            "    Open specified tags:",
            "    $ z --go 10,20,30-40"
        )
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts(e.message)
        puts(parser)
        exit ZoomExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts(e.message)
        puts(parser)
        exit ZoomExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts(e.message)
        puts(parser)
        exit ZoomExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts(e.message)
        puts(parser)
        exit ZoomExit::AMBIGUOUS_ARGUMENT
    end

    case File.basename($0)
    when "zc"
        options["action"] = "cache"
    when "zf"
        options["use"] = "find"
    when "zg"
        options["action"] = "go"
        options["use"] = args[0]
    when "zl"
        options["action"] = "list_profiles"
    when "zr"
        options["action"] = "repeat"
    when "z"
        # Do nothing, this is the normal usage
        # Add to this case if renaming
    else
        options["use"] = File.basename($0)
    end

    paths = Array.new
    regex = args.delete_at(-1)
    while (regex && Pathname.new(regex).exist?)
        paths.push(regex)
        regex = args.delete_at(-1)
    end

    if (options["regex"])
        args.push(regex) if (regex)
    else
        regex ||= paths.delete_at(-1)
        options["regex"] = regex
    end

    options["paths"] = "."
    options["paths"] = paths.reverse.join(" ") if (!paths.empty?)

    options["passthru"] = "#{passthru.join(" ")} #{args.join(" ")}"

    return options
end

options = parse(ARGV)

begin
    if (options["action"] == "rc")
        FileUtils.rm_f(Pathname.new("~/.config/zoom/rc").expand_path)
    end

    Zoom::ProfileManager.force_tool(options["tool"])
    zoom = Zoom.new(options["cache_file"])
    Zoom.hilight(!Hilighter.disable?)

    case options["action"]
    when "cache"
        zoom.cache.shortcut
    when "configure"
        Zoom.hilight(false)
        djinni = Djinni.new
        djinni.load_wishes(
            "#{File.dirname(__FILE__)}/../lib/zoom/wish"
        )
        djinni.prompt(
            {
                "cache" => zoom.cache,
                "config" => zoom.config,
                "prompt_color" => "white",
                "zoom" => zoom
            },
            "zoom(#{zoom.config.get_current_profile_name})> ".white
        )
    when "go"
        if (options["use"])
            results = zoom.cache.get_results(options["use"])
            zoom.open(results)
        end
    when "list_profiles"
        profiles = zoom.config.parse_profiles
        profiles.keys.sort do |a, b|
            a.downcase <=> b.downcase
        end.each do |name|
            if (name == zoom.config.get_current_profile_name)
                print "*".red
            end

            lines = profiles[name].to_s.scan(
                /\S.{0,76}\S(?=\s|$)|\S+/
            )
            puts(lines.delete_at(0))
            lines.each do |line|
                puts("    #{line}")
            end
        end
    when "list_profile_names"
        puts(zoom.config.get_profile_names)
    when "list_tags"
        puts(zoom.cache.available_tags)
    when "repeat"
        zoom.repeat
    when "rc"
        # zoom.config.default # Redundant
        zoom.cache.clear
    when "secprofs"
        zoom.config.add_security_profiles
    when "which"
        name = zoom.config.get_current_profile_name
        profile = zoom.config.get_profile(name)

        lines = profile.to_s.scan(/\S.{0,76}\S(?=\s|$)|\S+/)
        puts(lines.delete_at(0))
        lines.each do |line|
            puts("    #{line}")
        end
    else
        # Search and cache results
        header = Hash.new
        header["args"] = options["passthru"]
        header["debug"] = options["debug"]
        header["paths"] = options["paths"]
        header["profile_name"] = options["use"]
        header["regex"] = options["regex"]
        header["translate"] = options["translate_flags"]
        zoom.run(header)
    end
rescue SystemExit
    # Quit from djinni
    # Exit gracefully
rescue Zoom::Error => e
    $stderr.puts(e.message)
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts(line.yellow)
        end
    end
    exit ZoomExit::EXCEPTION
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before Zoom is done with STDOUT.
rescue Exception => e
    $stderr.puts(
        [
            "Oops! Looks like an error has occured! Try resetting",
            "your config with \"z --rc\" and if the error persists,",
            "file a bug at:"
        ].join(" ").wrap
    )
    $stderr.puts
    $stderr.puts("  https://gitlab.com/mjwhitta/zoom/issues")
    $stderr.puts
    $stderr.puts(
        [
            "Maybe the message below will help. If not, you can use",
            "the --verbose flag to get a backtrace."
        ].join(" ").wrap
    )
    $stderr.puts

    $stderr.puts(e.message.white.on_red)
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts(line.light_yellow)
        end
    end
    exit ZoomExit::EXCEPTION
end
exit ZoomExit::GOOD
